package com.school.scheduling.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.school.scheduling.entity.Subject;
import com.school.scheduling.service.Services;

@Controller
@RequestMapping("/subject")
public class SubjectController {

	private Services<Subject> subjectService;
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));
	}
	
	@Autowired
	public SubjectController(Services<Subject> subjectService) {
		this.subjectService =subjectService;
	}
	
	// add mapping for "/list
	@GetMapping("/form")
	public String SubjectList(Model theModel) {
		Subject subject = new Subject();
		theModel.addAttribute("subjects",subjectService.findAll());
		theModel.addAttribute("subject",subject);
		return "subjects/subject-add-form";
	}
	
	// to save an entity
	@PostMapping("/save")
	public String SubjectAdd(@Valid @ModelAttribute("subject") Subject subject, BindingResult binding) {
		
		if(binding.hasErrors()) {
			System.out.println("i have Error");
			return "form";
		}else {
			subjectService.save(subject);
		}
		
		return "redirect:/subject/form";
	}
	
	// to delete an entity
	@GetMapping("/delete")
	public String SubjectDelete(@RequestParam("subject_id") int theiD) {
		
		subjectService.deleteById(theiD);
		
		
		return "redirect:/subject/form";
	}
	
	// to subject content
	@GetMapping("/content")
	public String SubjectContent(Model theModel) {
		theModel.addAttribute("subjects",subjectService.findAll());
		return "subjects/subject-view";
	}
	
	@GetMapping("/update")
	public String SubjectUpdate(@RequestParam("subject_id") int theiD,
			Model theModel) {
		Subject subject  = subjectService.findbyId(theiD);
		System.out.println(subject);
		theModel.addAttribute("subjects",subjectService.findAll());
		if(subject == null) subject = new Subject();	
		theModel.addAttribute("subject",subject );
		return "subjects/subject-add-form";
	}
	
	
	/******************************Deleted or udpate  in the main view ***********************************************/

	@GetMapping("/delete_main")
	public String SubjectDeleteMain(@RequestParam("subject_id") int theiD) {
		subjectService.deleteById(theiD);
		return "redirect:/subject/content";
		
	}
	
	
	
	
	
	
}
	