package com.school.scheduling.validations;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.springframework.beans.factory.annotation.Autowired;
import com.school.scheduling.entity.Room;
import com.school.scheduling.entity.Room_Shift;
import com.school.scheduling.service.Services;

public class TimeHindrance_RoomShift implements ConstraintValidator<CheckTime_RoomShift, Room_Shift> {

	private String message;

	public TimeHindrance_RoomShift() {

	}

	@Override
	public void initialize(CheckTime_RoomShift time) {
		message = time.message();
	}

	@Override
	public boolean isValid(Room_Shift value, ConstraintValidatorContext context) {
		DateFormat dateFormat = new SimpleDateFormat("hh:mm");

		Calendar new_start_time = Calendar.getInstance();
		Calendar new_end_time = Calendar.getInstance();

		Calendar old_start_time = Calendar.getInstance();
		Calendar old_end_time = Calendar.getInstance();

		try {
			new_start_time.setTime(dateFormat.parse(value.getStartTime()));
			new_end_time.setTime(dateFormat.parse(value.getEndTime()));

			if (value.getRoom().getRoom_shiftList().size() != 0) {

				for (Room_Shift roomshift : value.getRoom().getRoom_shiftList()) {
					old_start_time.setTime(dateFormat.parse(roomshift.getStartTime()));
					old_end_time.setTime(dateFormat.parse(roomshift.getEndTime()));
					System.out.println("The old end Time -> " + old_end_time
						+ " , The new Start Time " + new_start_time);
					if (new_start_time.after(old_end_time) || 
						new_start_time.equals(old_start_time)) {

						// The custom message yo want to pass;
						message = "Time Should start or higer	: " + dateFormat.format(old_end_time.getTime());
						context.disableDefaultConstraintViolation();

						// build new violation message and add it
						context.buildConstraintViolationWithTemplate(message).addConstraintViolation();

						return false;
					} // end if

				} // for loop

			} // end in size 0

			return true;
		} catch (ParseException e1) {
			System.out.println("i have error");
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// th:if="${#fields.hasErrors('${subject.*}')}" th:errors="${subject.*}"

		return false;
	}

}
