package com.school.scheduling.validations;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.springframework.beans.factory.annotation.Autowired;
import com.school.scheduling.entity.Room;
import com.school.scheduling.entity.Room_Shift;
import com.school.scheduling.service.Services;

public class TimeHindrance_RoomShift implements ConstraintValidator<CheckTime_RoomShift, Room_Shift> {

	private String message;

	public TimeHindrance_RoomShift() {

	}

	@Override
	public void initialize(CheckTime_RoomShift time) {
		message = time.message();
	}

	@Override
	public boolean isValid(Room_Shift value, ConstraintValidatorContext context) {
		DateFormat dateFormat = new SimpleDateFormat("HH:mm");

		Calendar new_start_time = Calendar.getInstance();
		Calendar new_end_time = Calendar.getInstance();

		Calendar old_start_time = Calendar.getInstance();
		Calendar old_end_time = Calendar.getInstance();

		try {
			if (value.getStartTime() == null || value.getEndTime() == null) {
				return false;
			}
			new_start_time.setTime(dateFormat.parse(value.getStartTime()));
			new_end_time.setTime(dateFormat.parse(value.getEndTime()));

			if (new_start_time.getTime().after(new_end_time.getTime())) {

				message = "Time Should should not exceed to end time" + new_end_time.getTime();
				context.disableDefaultConstraintViolation();

				// build new violation message and add it
				context.buildConstraintViolationWithTemplate(message).addConstraintViolation();
				return false;
			} else {
				try {
					if (value.getRoom().getRoom_shiftList().size() != 0) {

						for (Room_Shift roomshift : value.getRoom().getRoom_shiftList()) {

							old_start_time.setTime(dateFormat.parse(roomshift.getStartTime()));
							old_end_time.setTime(dateFormat.parse(roomshift.getEndTime()));
							if (value == roomshift) {

							} else {

								// it will check if the new start time is before in  n of old time start time
								if (new_start_time.getTime().before(old_start_time.getTime())) {
									System.out.println("Pasok ako sa if");
									// it will check if the new old time is before in n of old time start time
									if (new_end_time.getTime().before(old_start_time.getTime())) {
										System.out.println("in ifThe new end tiem -> " + new_end_time.getTime() + " , " + old_start_time.getTime() );
										return true;
									}else {
										message = "Time Should start or higher than "
												+ dateFormat.format(old_end_time.getTime());
										context.disableDefaultConstraintViolation();

										context.buildConstraintViolationWithTemplate(message).addConstraintViolation();
										
										return false;
									}

								} else if (new_start_time.getTime().after(old_end_time.getTime())) {
									System.out.println("The new end tiem -> " + new_end_time.getTime() + " , " + old_start_time.getTime() );
									
									return true;
								}
							}

						} // a for loop

					} // end in size 0
				} catch (NullPointerException e) {

				}
			} // end else

			if (new_start_time.getTime().equals(new_end_time.getTime())) {
				message = "Start Time should not equal to end time";
				context.disableDefaultConstraintViolation();

				// build new violation message and add it
				context.buildConstraintViolationWithTemplate(message).addConstraintViolation();
				return false;
			}
			return true;
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			// e1.printStackTrace();
		}
		return false;
		// th:if="${#fields.hasErrors('${subject.*}')}" th:errors="${subject.*}"

	}

}
