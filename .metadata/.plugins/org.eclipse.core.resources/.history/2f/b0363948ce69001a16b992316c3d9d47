package com.school.scheduling.controller;

import java.util.HashSet;
import java.util.Set;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.school.scheduling.entity.BreakTime;
import com.school.scheduling.entity.Room;
import com.school.scheduling.entity.Room_Shift;
import com.school.scheduling.entity.StrandAndCourse;
import com.school.scheduling.entity.Student;
import com.school.scheduling.service.Services;

@Controller()
@RequestMapping("/room")
public class RoomController {

	private int back = 0;

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));
	}

	/********************** For Room list ******************************/
	private Services<BreakTime> breakService;

	private Services<Room> roomService;
	private Services<Room_Shift> roomShiftService;
	private Services<StrandAndCourse> strandService;
	private Services<Student> studnetService;
	private Room room;
	private Room_Shift roomShift;

	@Autowired
	public RoomController(Services<Room> roomService, Services<Room_Shift> roomShiftService,
			Services<StrandAndCourse> strandService,Services<BreakTime> breakService, Services<Student> studnetService) {
		this.roomService = roomService;
		this.roomShiftService = roomShiftService;
		this.strandService = strandService;
		this.breakService= breakService;
		this.studnetService = studnetService;
	}

	/********************************* Mapping for Room ******************/

	// request mapping for room list
	@GetMapping("/list")
	public String RoomList(Model model) {
		model.addAttribute("rooms", roomService.findAll());
		back = -1;
		this.room = null;
		return "room/room list/room-list";

	}

	// request mapping for room add
	@GetMapping("/form")
	public String Room_Form(Model model) {
		this.room = new Room();
		model.addAttribute("room_object", this.room);

		model.addAttribute("back", back);
		model.addAttribute("action", "Save Room");
		return "room/room list/room-form";

	}

	@PostMapping("/save")
	public String Room_Save(@ModelAttribute("room_object") Room room, Model model, BindingResult binding) {
		this.room.setRoomName(room.getRoomName());
		roomService.save(this.room);
		back = -2;

		return "redirect:/room/form";
	}

	@GetMapping("/update")
	private ModelAndView Room_Update(@RequestParam("room_id") int theId) {
		ModelAndView model = new ModelAndView("room/room list/room-form");

		Room room_model = this.room;
		try {
			// trying to find the object in the form created
			if (room_model.getRoomName() == null) {
				room_model = roomService.findbyId(theId);
				if (room_model == null)
					new Room();
			}
		} catch (NullPointerException e) {
			// if the new object in the form not created we
			// will find it in the database
			room_model = roomService.findbyId(theId);
		}
		this.room = room_model;

		model.addObject("room_object", room_model);
		model.addObject("room_shifts", room_model.getRoom_shiftList());
		model.addObject("back", back);
		model.addObject("action", "Update Room");
		return model;
	}

	@GetMapping("/delete")
	private String Room_Delete(@RequestParam("room_id") int theId) {

		roomService.deleteById(theId);


		return "redirect:/room/form";
	}

	@GetMapping("/deleteMain")
	private String Room_DeleteMain(@RequestParam("room_id") int theId) {
		roomService.deleteById(theId);

		return "redirect:/room/list";
	}

	/********************************* Mapping for roomBreak ******************/

	// request mapping for room list
	@GetMapping("/break/list")
	public String RoomBreak_List(Model model) {

		Set<BreakTime> breaks = new HashSet<BreakTime>();
		roomShiftService.findAll().forEach(e -> {
			e.getRoom_shift_breakTimeList().forEach(f -> breaks.add(f));

		});

		model.addAttribute("room_breaks", breaks);
		return "room/room breaktime/room-break";
	}
	
	@GetMapping("/break/list/add")
	public String RoomBreak_ListAdd(Model model) {

		model.addAttribute("shift_object", this.roomShift);
		model.addAttribute("room_breaks", breakService.findAll());
		return "room/room breaktime/room-break-check";
	}

	@GetMapping("/break/form")
	public String RoomBreak_Form(Model model) {
		
		model.addAttribute("break_object", new BreakTime());
		model.addAttribute("action","Save");
		return "room/room breaktime/room-break-form";
	}

	// request mapping for room break save
	@PostMapping("/break/save")
	public String RoomBreak_Add(@ModelAttribute("shift_object") Room_Shift room, Model model) {

		System.out.println("The room in form -> " + room.getRoom_shift_breakTimeList());
		System.out.println("The room in controller -> "  this.roomShift.getRoom_shift_breakTimeList());
		
//		if(this.roomShift.getRoom_shift_breakTimeList() !=null) {
//			if(room.getRoom_shift_breakTimeList()!= null) this.roomShift.getRoom_shift_breakTimeList().addAll(room.getRoom_shift_breakTimeList());	
//		}else {
//			this.roomShift.setRoom_shift_breakTimeList(room.getRoom_shift_breakTimeList());
//		}
		return "redirect:/room/break/form";
	}

	@GetMapping("/break/update")
	private String RoomBreak_Update() {
		return "redirect:/room/break/form";
	}

	@GetMapping("/break/delete")
	private String RoomBreak_Delete() {
		return "redirect:/room/break/form";
	}

	/********************************* Mapping for roomShift ******************/

	// request mapping for room list
	@GetMapping("/shift/list")
	public ModelAndView RoomShift_List() {
		back = -1;
		ModelAndView model = new ModelAndView("room/room shift/room-shift");
		model.addObject("room_shifts", roomShiftService.findAll());
		return model;
	}

	@GetMapping("/shift/form")
	public String RoomShift_Form(Model model) {
		Room_Shift room_shift = new Room_Shift();

		model.addAttribute("roomShift_object", room_shift);

		model.addAttribute("room_list", roomService.findAll());
		model.addAttribute("strand_list", strandService.findAll());
		model.addAttribute("action", "Save Shift");
		model.addAttribute("back", back);
		return "room/room shift/room-shift-form";
	}

	// request mapping for room add
	@PostMapping("/shift/save")
	public String RoomShift_Add(@Valid @ModelAttribute("roomShift_object") Room_Shift rooms_shift,
			BindingResult binding, Model model) {

		if (binding.hasErrors()) {
			back += -1;

			if (this.room != null)
				model.addAttribute("room_list", this.room);
			else
				model.addAttribute("room_list", roomService.findAll());

			model.addAttribute("strand_list", strandService.findAll());

			return "room/room shift/room-shift-form";
		}
		back += -2;
		System.out.println(rooms_shift);
		roomShiftService.save(rooms_shift);

		return "redirect:/room/shift/form";
	}

	@GetMapping("/shift/update")
	private String RoomShift_Update(@ModelAttribute("roomShift_id") int theId, Model model) {

		Room_Shift room_shift = roomShiftService.findbyId(theId);
		model.addAttribute("roomShift_object", room_shift);
		model.addAttribute("room_list", room_shift.getRoom());

		model.addAttribute("strand_list", room_shift.getStrandAndCourse());

		model.addAttribute("back", back);
		model.addAttribute("action", "Update Shift");
		this.roomShift = room_shift;
		System.out.println(this.roomShift);
		return "room/room shift/room-shift-form";
	}

	@GetMapping("/shift/delete")
	private String RoomShift_Delete(@ModelAttribute("roomShift_id") int theId) {
		roomShiftService.deleteById(theId);
		return "redirect:/room/shift/form";
	}

	@GetMapping("/shift/delete_Main")
	private String RoomShift_DeleteMain(@ModelAttribute("roomShift_id") int theId) {
		Room_Shift room = roomShiftService.findbyId(theId);
		room.getStudentList().forEach(e-> studnetService.delete(e));
//		room.setStudentList(null);
		room.setRoom(null);
		room.setStrandAndCourse(null);
		room.setStudentList(null);
		roomShiftService.delete(room);
		return "redirect:/room/shift/list";
	}

	/********************************* Mapping for Room Schedule ******************/

	@GetMapping("/schedule/list")
	public String RoomSchedule_List() {
		return "room/room shift schedule/room-schedule";
	}

	@GetMapping("/schedule/form")
	public String RoomSchedule_Form() {

		return "room/room shift schedule/room-schedule-form";
	}

	// request mapping for room add
	@PostMapping("/schedule/add")
	public String RoomSchedule_Add() {
		Room_Shift room = new Room_Shift();

		return "redirect:/room/schedule/form";
	}

	@GetMapping("/schedule/update")
	private String RoomSchedule_Update() {
		return "redirect:/room/schedule/form";
	}

	@GetMapping("/schedule/delete")
	private String RoomSchedule_Delete(int theId) {
		roomShiftService.deleteById(theId);
		return "redirect:/room/schedule/form";
	}

}
